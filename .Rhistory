attr.params=list(size = 9,
alpha = 0.9),
text.params=list( size = rel(10),
alpha = 0.9))
#show the statistic table
head(emr_cat$statistics_table$PC_data)
head(emr_cat$statistics_table$attr_data)
emr_cat$statistics_table$table_one_flextable
#Biplot of the first and second principal components with change plot parameters
emr_cat$biplot$clustering_biplots
#Profile the number and proportion of case in each cluster
emr_cat$biplot$profile_by_cluster_integrated
#Profile the number and proportion of case in each group
emr_cat$biplot$profile_by_group_integrated
#wind_rose_plot data prepare
exam_items <-emr_cat[["statistics_table"]][["use_table"]]$Ori_Variable%>%unique()%>%na.exclude()
exam_items<-exam_items[-c(1,2)]
profile_status_by_item_data <-
copy(emr_cat[["statistics_table"]][["PC_data"]]) %>%
# Subset data by column names
.[,.SD,.SDcols = c("Cluster",exam_items)] %>%
# Transform data set into long format for further data portraying
melt(.,
measure.vars = exam_items,
variable.name = "Exam_item",
value.name = "Status")  %>%
# Tabulation
.[,.N,by = c("Cluster","Exam_item","Status")]
profile_status_by_item_data[grep("Not",profile_status_by_item_data$Status),3]<-"Not"
profile_status_by_item_data[-grep("Not",profile_status_by_item_data$Status),3]<-"Yes"
#wind_rose_plot
pic<-wind_rose_plot(data=profile_status_by_item_data,emr_out = emr_cat)
pic[["wind"]]
pic[["rose"]]
#sen_spe data prepare
levels<-c("Not"=0,"AbN"=1)
sen_spe_data_prep <-
copy(emr_cat[["statistics_table"]][["PC_data"]]) %>%
.[,c(exam_items) := purrr::map(.SD,
~ str_split(.x,"\\.",simplify = TRUE)[,1] %>%
factor(.,
levels = c("Not",""),
labels = c(levels[1],levels[2]))),
.SDcols = exam_items]
sen_spe_data_prep[is.na(sen_spe_data_prep)]<-1
#run sen_spe_out
sen_spe_out<-sen_spe(emr_out = emr_cat,prep_data = sen_spe_data_prep,use_parameter = pic)
sen_spe_out
summary(cars)
devtools::document()
rlang::last_error()
document()
load_all()
load_all()
rlang::last_error()
document()
document()
document()
load_all()
document()
load_all(0)
load_all()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(3:4),
ndim=c(2:3),
group="Species",
nStart=50)
document(0)
document()
load_all(0)
load_all()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(3:4),
ndim=c(2:3),
group="Species",
nStart=50)
document(0)
document()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(3:4),
ndim=c(2:3),
group="Species",
nsatart=50)
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(3:4),
ndim=c(2:3),
group="Species")
document(0)
document()
load_all()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(3:4),
ndim=c(2:3),
group="Species")
document()
load_all()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(3:4),
ndim=c(2:3),
group="Species")
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Species")
document()
load_all()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Species")
profile_by_cluster_integrated
document()
document()
load_all()
documetnt(0)
documetnt()
document()
load_all()
load_all()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Species")
document()
load_all()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Species")
View(emr_numeric)
emr_numeric[["biplot"]]
load_all(0)
load_all()
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Species")
View(emr_numeric)
emr_numeric[["biplot"]]
unlink("README_cache", recursive = TRUE)
document()
load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
## basic example code
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Species")
#show the statistic table
head(emr_numeric$statistics_table$PC_data)
head(emr_numeric$statistics_table$attr_data)
emr_numeric$statistics_table$table_one_flextable
#Biplot of the first and second principal components
emr_numeric$biplot$clustering_biplots
#Profile the number and proportion of case in each cluster
emr_numeric$biplot$profile_by_cluster_integrated
#Profile the number and proportion of case in each group
emr_numeric$biplot$profile_by_group_integrated
#for categorical dataset with seperate dimention reduction & clustering method example with change plot parameters
data(tea)
tea<-tea[,c(1:13)]
emr_cat<-emr_clust(tea,
method =c("MCA","Kmedoid"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Tea",
nStart=50,
attr.params=list(size = 9,
alpha = 0.9),
text.params=list( size = rel(10),
alpha = 0.9))
library(TEST)
library(FactoMineR)
library(tidyverse)
library(reshape2)
library(data.table)
#for numerical dataset with combine dimention reduction & clustering method example
emr_numeric<-emr_clust(iris,
method =c("PCA","Kmean"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Species")
#show the statistic table
head(emr_numeric$statistics_table$PC_data)
head(emr_numeric$statistics_table$attr_data)
emr_numeric$statistics_table$table_one_flextable
#Biplot of the first and second principal components
emr_numeric$biplot$clustering_biplots
#Biplot of the first and second principal components
emr_numeric$biplot$clustering_biplots
#Profile the number and proportion of case in each cluster
emr_numeric$biplot$profile_by_cluster_integrated
#Profile the number and proportion of case in each cluster
emr_numeric$biplot$profile_by_cluster_integrated
#Profile the number and proportion of case in each group
emr_numeric$biplot$profile_by_group_integrated
#Profile the number and proportion of case in each group
emr_numeric$biplot$profile_by_group_integrated
#for categorical dataset with seperate dimention reduction & clustering method example with change plot parameters
data(tea)
#for categorical dataset with seperate dimention reduction & clustering method example with change plot parameters
data(tea)
tea<-tea[,c(1:13)]
#for categorical dataset with seperate dimention reduction & clustering method example with change plot parameters
data(tea)
tea<-tea[,c(1:13)]
emr_cat<-emr_clust(tea,
method =c("MCA","Kmedoid"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Tea",
nStart=50,
attr.params=list(size = 9,
alpha = 0.9),
text.params=list( size = rel(10),
alpha = 0.9))
#for categorical dataset with seperate dimention reduction & clustering method example with change plot parameters
data(tea)
tea<-tea[,c(1:13)]
emr_cat<-emr_clust(tea,
method =c("MCA","Kmedoid"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Tea",
nstart=50,
attr.params=list(size = 9,
alpha = 0.9),
text.params=list( size = rel(10),
alpha = 0.9))
emr_cat<-emr_clust(tea,
method =c("MCA","Kmedoid"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Tea",
nstart=50,
attr.params=list(size = 9,
alpha = 0.9),
text.params=list( size = rel(10),
alpha = 0.9))
#show the statistic table
head(emr_cat$statistics_table$PC_data)
#show the statistic table
head(emr_cat$statistics_table$PC_data)
head(emr_cat$statistics_table$attr_data)
emr_cat$statistics_table$table_one_flextable
emr_cat<-emr_clust(tea,
method =c("MCA","Kmedoid"),
center = TRUE,
scale = TRUE,
kmoCutoff = 0.5,
nclus=c(4:5),
ndim=c(2:3),
group="Tea",
nstart=50,
attr.params=list(size = 9,
alpha = 0.9),
text.params=list( size = rel(10),
alpha = 0.9))
#show the statistic table
head(emr_cat$statistics_table$PC_data)
head(emr_cat$statistics_table$attr_data)
emr_cat$statistics_table$table_one_flextable
#Biplot of the first and second principal components with change plot parameters
emr_cat$biplot$clustering_biplots
#Biplot of the first and second principal components with change plot parameters
emr_cat$biplot$clustering_biplots
#Profile the number and proportion of case in each cluster
emr_cat$biplot$profile_by_cluster_integrated
emr_cat$statistics_table$table_one_flextable
#Biplot of the first and second principal components with change plot parameters
emr_cat$biplot$clustering_biplots
#Profile the number and proportion of case in each cluster
emr_cat$biplot$profile_by_cluster_integrated
#Profile the number and proportion of case in each group
emr_cat$biplot$profile_by_group_integrated
#Profile the number and proportion of case in each group
emr_cat$biplot$profile_by_group_integrated
#wind_rose_plot data prepare
exam_items <-emr_cat[["statistics_table"]][["use_table"]]$Ori_Variable%>%unique()%>%na.exclude()
exam_items<-exam_items[-c(1,2)]
exam_items<-exam_items[-c(1,2)]
profile_status_by_item_data <-
copy(emr_cat[["statistics_table"]][["PC_data"]]) %>%
# Subset data by column names
.[,.SD,.SDcols = c("Cluster",exam_items)] %>%
# Transform data set into long format for further data portraying
melt(.,
measure.vars = exam_items,
variable.name = "Exam_item",
value.name = "Status")  %>%
# Tabulation
.[,.N,by = c("Cluster","Exam_item","Status")]
profile_status_by_item_data[grep("Not",profile_status_by_item_data$Status),3]<-"Not"
profile_status_by_item_data <-
copy(emr_cat[["statistics_table"]][["PC_data"]]) %>%
# Subset data by column names
.[,.SD,.SDcols = c("Cluster",exam_items)] %>%
# Transform data set into long format for further data portraying
melt(.,
measure.vars = exam_items,
variable.name = "Exam_item",
value.name = "Status")  %>%
# Tabulation
.[,.N,by = c("Cluster","Exam_item","Status")]
profile_status_by_item_data[grep("Not",profile_status_by_item_data$Status),3]<-"Not"
profile_status_by_item_data[-grep("Not",profile_status_by_item_data$Status),3]<-"Yes"
profile_status_by_item_data[-grep("Not",profile_status_by_item_data$Status),3]<-"Yes"
#wind_rose_plot
pic<-wind_rose_plot(data=profile_status_by_item_data,emr_out = emr_cat)
profile_status_by_item_data[-grep("Not",profile_status_by_item_data$Status),3]<-"Yes"
#wind_rose_plot
pic<-wind_rose_plot(data=profile_status_by_item_data,emr_out = emr_cat)
pic[["wind"]]
pic[["wind"]]
pic[["rose"]]
#sen_spe data prepare
levels<-c("Not"=0,"AbN"=1)
#Biplot of the first and second principal components with change plot parameters
emr_cat$biplot$clustering_biplots
#Profile the number and proportion of case in each cluster
emr_cat$biplot$profile_by_cluster_integrated
#Profile the number and proportion of case in each group
emr_cat$biplot$profile_by_group_integrated
#wind_rose_plot data prepare
exam_items <-emr_cat[["statistics_table"]][["use_table"]]$Ori_Variable%>%unique()%>%na.exclude()
exam_items<-exam_items[-c(1,2)]
profile_status_by_item_data <-
copy(emr_cat[["statistics_table"]][["PC_data"]]) %>%
# Subset data by column names
.[,.SD,.SDcols = c("Cluster",exam_items)] %>%
# Transform data set into long format for further data portraying
melt(.,
measure.vars = exam_items,
variable.name = "Exam_item",
value.name = "Status")  %>%
# Tabulation
.[,.N,by = c("Cluster","Exam_item","Status")]
profile_status_by_item_data[grep("Not",profile_status_by_item_data$Status),3]<-"Not"
profile_status_by_item_data[-grep("Not",profile_status_by_item_data$Status),3]<-"Yes"
#wind_rose_plot
pic<-wind_rose_plot(data=profile_status_by_item_data,emr_out = emr_cat)
pic[["wind"]]
pic[["rose"]]
#sen_spe data prepare
levels<-c("Not"=0,"AbN"=1)
sen_spe_data_prep <-
copy(emr_cat[["statistics_table"]][["PC_data"]]) %>%
.[,c(exam_items) := purrr::map(.SD,
~ str_split(.x,"\\.",simplify = TRUE)[,1] %>%
factor(.,
levels = c("Not",""),
labels = c(levels[1],levels[2]))),
.SDcols = exam_items]
#sen_spe data prepare
levels<-c("Not"=0,"AbN"=1)
sen_spe_data_prep <-
copy(emr_cat[["statistics_table"]][["PC_data"]]) %>%
.[,c(exam_items) := purrr::map(.SD,
~ str_split(.x,"\\.",simplify = TRUE)[,1] %>%
factor(.,
levels = c("Not",""),
labels = c(levels[1],levels[2]))),
.SDcols = exam_items]
sen_spe_data_prep[is.na(sen_spe_data_prep)]<-1
sen_spe_data_prep[is.na(sen_spe_data_prep)]<-1
#run sen_spe_out
sen_spe_out<-sen_spe(emr_out = emr_cat,prep_data = sen_spe_data_prep,use_parameter = pic)
sen_spe_data_prep[is.na(sen_spe_data_prep)]<-1
#run sen_spe_out
sen_spe_out<-sen_spe(emr_out = emr_cat,prep_data = sen_spe_data_prep,use_parameter = pic)
sen_spe_out
library(TEST)
# install.packages("remotes")
remotes::install_github("DHLab-TSENG/emr_clust")
document()
library(devtools)
document()
